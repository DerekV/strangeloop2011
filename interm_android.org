
* detecting capabilities

** gingerbread
   can get device capabilities
** pre gingerbread
   - can't, but can wrap code so it won't blow : 
    - 
      have to use actual value not Build.VERSION_CODES.GINGERBREAD
      if ( Build.VERSION.SDK_INGT >= 9 ) {
      // ...
      }
*** propritary APIs 
    can get device cap pre gingerbread

* multimedia files
  are just files

* For embedding multimedia files
** /res/raw

   Resources res = this.getResources();
   stream = res.openRawResource(R.raw.sunflower);
   MediaPlayer.create(this, R.raw.constancy).start();
** assets
   MediaPlayer player 
   AssetManageer mgr = getResources().getAssets();
   
** space
   apk usually stores on internal memory
   can specifiy in manifest
*** store files on sdcard
    File picturesDir = Environment.getExternalStoragePublicDircetory(Environment.DIRECTORY_PICTURES)

* Images
  #+BEGIN_SRC java
  InputStream stream = new FileInputStream(imgFile);
  Bitmap bm = BitmapFactory.decodeStream(stream);
  
  // calculate desired width and height
  
  ThumbnailUtils.extractThumbnail(bm,width,height)  /// maybe doesnt do what you think
  Bitmap.createScaledBitmapbm, width, height // probably what you wanted
  #+END_SRC

** large images
*** custome loader
    decodeDownsizedBitmapStream 
   

    // build out your own options object, calculate bets downsamplesize
    in = new FileinputStream(file)
    Options options = new Options();
    options.inSampleSize = 1 + getDownSampleSize(max(source.first, source.second), target);
    return BitmapFactory.decodeStream(in, null, options);

* Loading web pages
  - don't ever use url.openStream

  URL url = new URL(urlString);
  
** AsyncTask
   yay!
   fun to extend it

  
*** ArrayAdapter example
    extending arrayadapter in a way that causes many asynctasks to be created
    seems bad
    actually this is in most cases OK

*** Leaks
    - contains implicit link to activity
    - rotating screen causes new activity to be created 
    - onPostExecute trys to hit old activity -> crash
    - also prevent whole activity's views to not be able to be garbage collected
**** getLastNonConfigurationInstance
     #+ BEGIN_SRC java
     onCreate () {
       task = (LeakProofAsyncTask) getLastNonCOnfigurationInstance();
       if (tast != null) { 
         task.potentialLeac = this;
       }
     }
     #+ END_SRC
    
  
* caching
** weak / soft refrences
   - let GB know it can null object out, yet you still have ref
   - used in server java for caching
   - not reliable on android
** weakhashmap
   - useless as caching because keys are weak not values
** MapMaker
   - guava
** LinkedHashMap
   - good for implementing LRU style cache
   - can define a max size (in number of elements)
   - no automatic way to determine memory usage (sum of element's memory)
   - recommendable way to do cache

     class ImageCache extends LinkedHashMap<String, Bitmap>{

** Disk Cache
*** Context.getCacheDir()
    - on flash memory, avoid for large cacehe
*** SQLite
    - also on internal flash memory
*** Environment.getExternalStroage
    - SDCard, best place for large objects
    - a little slower 

* Bitmaps & Heap
  java.lang.OutOfMemoryError: bitmap size exceeds VM budget

  - causes , relying on the GC to collect bitmaps...
  - prior to gingb , bitmaps not on heap
  - post gingb, theoritical bitmaps on heap can be GB but, 
  - might have to manually tell GC to collect bitmaps

* images and lists
** placeholders
   
** viewholders
   - point is to avoid unnessisiary calls to get vew by id
   - findViewById is actually a slow operations, involves a treewalk
   - use tags

* Stict Mode
  - introduce gingb
  - detects things that'll make your app slow. like,,, assertIsFast, assertWontBlockUI

    
* content providers
  - sort-of sql
** queries
   getContentReslolver().query(table,columns,whereClause,paramValues,sortOrder);
   while(cursor.moveToNext()){/*do stuff*/}
   
   cursor.close()

*** common query : music
    import static android.provider.BaseColumns._ID
    import static android.provider.MediaStore.Audio.AudioColumns.ARTIST;

*** Contacts
    String[] projection {Phone.CONTACT_ID, Phone,NUMBER};
    String selection = Data.IN_VISIBLE_GROUP + "=1 AND " + Phone.NUMBER + " LIKE ?";
    String[] selectionArgs ={"%" +phoneSubStr + "%"};
    Cursor phoneCursor = resolver.query(Phone,CONTENT_URI, projection, selection, selectionArgs, )

** HTC 
   common content providers is up to handset provider to implement
   HTC leaks memory bad, for content providers, free cursors aggressivly

* Scanning media
  Let android know about media your app adds to the phone, so it shows up in gallery etc
** MediaScannerConnection
   MediaScannerConnectionClient
     onMediaScannerConneccted() {
       scanFile("/some/pah/SomeSong.mp3","media/mpeg3");

* CursorAdapters
  are neat

* Use Other Apps
  use an intent
  - 
    Intent videoChooser = new Intent(Intent.ACTION_GET_CONTENT);
    videoChooser.setType("video/*");
    statACtivityForresult(videoChooser, SELECTVIDEO);

** HTC
   returns results with URI in wrong place on some phones

* Animation
** Dissolve Animation
   AlphaAnimation
** Honeycomb -- Animators
   ObjectAnimator anim = ObjectAnimator.ofFloat(backgroundImage, "alpha" 0.0f, 1.0f);
   // needs to have getters and setters for alpha
   .. in listener
   onAnimationEnd(Animator animator){
     nextSlide();  // assuming we're doing a slideshow
   }


* Compatability jars
  some cases you can retroactivly add features of new OSs to old phones with compat jars


* A/V Playback
** Audio Preview
   
* Handler
  Pipeline thread 
  

* Playing music
  - make sure music stops playing onPause, onStop, onDestroy etc

* Video playback
** VideoView
   VideoView video = (VideoView) findViewById(R.id.video);
   video.setVideoURI(videoURI);
   MediaController for pause, resume etc
   
* Take a pic
** use intents
   Intent it = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
   photoUri = getContentResolver().insert(
     EXTERNA_CONTENT_URI, new ContentValues());
   intent.putExtra(MediaStore.EXTRAOUTPUT, photoUri);
   startActivityForREsult(intent,TAKE_PHOTO);

 ** HTC 
   doesn't conform with behavior for camera intents

** EXIF
   rotation detection
   android stores raw image, puts tag to rotate in EXIF data
   ExifInterface(somePath).getAttributeInt(TAG_ORIENTATION, 
*** geotagging
    exif.setAttribute(ExifInterface.TAG_GPS_LATITUDE")

    format ... "dd/1,mm/1,ss/1"

**** LocationManager
     bump uses location
**** providers
     query all providers, or say how accurate, how fast you want it,
     one provider just caches previous results
     GPS is accurate
     network is most dependable
     getLastKnownLocation(last) synchronous call , might be really old
     requestLocationUpdates , can specify desired accuracy 

     
* uploading a photo to cloud
** use apache http client
   http post
   MutlipartEntity = new MultipartEntity(HtpMultipartMode.BROWSER_COMPATIBLE);
   ENTITY.ADDPART(IMAGE", new FileBody(img

** IntentService
   extends IntentService
   protected void onHandleIntent(Intent i){
   i.getStringExtra("file");



   use intentservice due to process priority
   less likely to be killed , if app is suspended, it becomse background process
   service process > background process

   give service a name in manifest, give it a colon as a prefix to let it know its a service process
     however, you don't have to put it in a seperate process for this to work

   
* A/V recording
** preview
   show video that is recording
   SurfaceView
   Camera.open().setPreviewDisplay
   MediaRecorder
   mediaRecoder.setCamera(camera);
   

* Presenter
** Book 
   Android in practice
** Android Bump
** BumpCube
** 
